# -*- coding: utf-8 -*-
"""Research project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SrB0TzZVdNPzZDc_a1G2bPyW5AVhpJRv
"""

#!pip install gym tensorflow pandas

import pandas as pd

df = pd.read_csv('/content/GBP_USD Historical Data .csv')

df.tail()

df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values(by='Date')

df.info()

df = df.sort_values(by='Date', ascending=True)

df.tail()

"""## Pre-process the Data"""

# Next, let's drop the 'Vol.' column
df = df.drop(columns=['Vol.'])

from sklearn.preprocessing import MinMaxScaler

# Initialize the scaler
scaler = MinMaxScaler()

# Apply scaling to relevant columns (e.g., 'Price', 'Open', 'High', 'Low')
df[['Price', 'Open', 'High', 'Low']] = scaler.fit_transform(df[['Price', 'Open', 'High', 'Low']])

# Calculate daily returns
df['Daily_Return'] = df['Price'].pct_change()

# Calculate moving averages (e.g., 10-day and 50-day)
df['MA_10'] = df['Price'].rolling(window=10).mean()
df['MA_50'] = df['Price'].rolling(window=50).mean()

df.tail()

#split the dataset
eval_df = df[-700:]

# Keep the rest in df
df = df[:-700]

eval_df.tail()

df.tail()

initial_balance = 0

import gym
from gym import spaces
import numpy as np

class ForexTradingEnv(gym.Env):
    def __init__(self, df):
        super(ForexTradingEnv, self).__init__()

        # Define the action and observation spaces
        self.action_space = spaces.Discrete(2)  # Buy or Sell
        self.observation_space = spaces.Box(low=0, high=np.inf, shape=(num_features,))

        # Set initial state
        self.current_step = 0
        self.df = df

    def reset(self):
        # Reset the environment to the initial state
        self.current_step = 0
        self.state = self._get_state()
        self.balance = initial_balance  # Initialize the account balance
        self.stock_inventory = 0  # Initialize the stock inventory
        self.net_worth = initial_balance  # Initialize net worth
        self.max_net_worth = initial_balance  # Initialize max net worth
        self.trades = []  # To store trade information
        return self.state

    def step(self, action):
        # Execute the action and return the next state, reward, done flag, and info
        self._take_action(action)
        self.current_step += 1

        if self.current_step >= len(self.df) - 1:
            done = True
        else:
            done = False

        self.state = self._get_state()

        reward = self._calculate_reward()

        return self.state, reward, done, {}


    def _get_state(self):
      # Example state representation: Concatenate relevant features from your DataFrame
      state = np.array([
          self.df['Price'].iloc[self.current_step],
          self.df['Daily_Return'].iloc[self.current_step],
          self.df['MA_10'].iloc[self.current_step],
          self.df['MA_50'].iloc[self.current_step]
      ])
      return state

    def _calculate_reward(self):
      # Example reward function: Simple daily return-based reward
      previous_balance = self.net_worth
      current_balance = self.balance + (self.stock_inventory * self.df['Price'].iloc[self.current_step])
      daily_return = (current_balance - previous_balance) / previous_balance

      return daily_return

    def _take_action(self, action):
      # Example trading logic: Buy if action is 1, sell if action is 0
      current_price = self.df['Price'].iloc[self.current_step]

      if action == 1:  # Buy
          if self.balance > 0:  # Ensure there's enough balance to buy
              shares_bought = self.balance / current_price
              self.stock_inventory += shares_bought
              self.balance = 0
              self.trades.append(('Buy', self.current_step, current_price))
      elif action == 0:  # Sell
          if self.stock_inventory > 0:  # Ensure there are stocks to sell
              self.balance += self.stock_inventory * current_price
              self.stock_inventory = 0
              self.trades.append(('Sell', self.current_step, current_price))

import numpy as np
import gym
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from collections import deque
import random

class DQNAgent:
    def __init__(self, state_size, action_size):
        self.state_size = state_size
        self.action_size = action_size
        self.memory = deque(maxlen=2000)
        self.gamma = 0.95  # Discount factor
        self.epsilon = 1.0  # Exploration rate
        self.epsilon_decay = 0.995
        self.epsilon_min = 0.01
        self.learning_rate = 0.001
        self.model = self._build_model()

    def _build_model(self):
        model = Sequential()
        model.add(Dense(24, input_dim=self.state_size, activation='relu'))
        model.add(Dense(24, activation='relu'))
        model.add(Dense(self.action_size, activation='linear'))
        model.compile(loss='mse', optimizer=Adam(lr=self.learning_rate))
        return model

    def act(self, state):
        if np.random.rand() <= self.epsilon:
            return random.randrange(self.action_size)
        act_values = self.model.predict(state)
        return np.argmax(act_values[0])

    def remember(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    def replay(self, batch_size):
        minibatch = random.sample(self.memory, batch_size)
        for state, action, reward, next_state, done in minibatch:
            target = reward
            if not done:
                target = (reward + self.gamma * np.amax(self.model.predict(next_state)[0]))
            target_f = self.model.predict(state)
            target_f[0][action] = target
            self.model.fit(state, target_f, epochs=1, verbose=0)
        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay

num_features = 4

# Initialize the forex trading environment
env = ForexTradingEnv(df)

# Initialize the DQN agent
state_size = env.observation_space.shape[0]
action_size = env.action_space.n
agent = DQNAgent(state_size, action_size)

batch_size = 32
episodes = 10

for episode in range(episodes):
    state = env.reset()
    state = np.reshape(state, [1, state_size])
    done = False
    total_reward = 0

    while not done:
        action = agent.act(state)
        next_state, reward, done, _ = env.step(action)
        next_state = np.reshape(next_state, [1, state_size])
        agent.remember(state, action, reward, next_state, done)
        state = next_state
        total_reward += reward

    if len(agent.memory) > batch_size:
        agent.replay(batch_size)

    print(f"Episode: {episode + 1}, Total Reward: {total_reward}")

# Save the trained model
agent.model.save("dqn_forex_trader.h5")

import numpy as np
from sklearn.metrics import accuracy_score, confusion_matrix

# Load the trained DQN model
from tensorflow.keras.models import load_model
model = load_model("dqn_forex_trader.h5")

# Define a function to preprocess the evaluation data
def preprocess_data(df):
    # Implement the same preprocessing steps you used for training data
    # Ensure that the data is in the same format as used during training
    pass

# Preprocess the evaluation data
eval_data = preprocess_data(eval_df)

# Define variables to store predictions and true labels
predictions = []
true_labels = []

# Initialize the environment for evaluation
state = env.reset()
state = np.reshape(state, [1, state_size])
done = False

while not done:
    action = model.predict(state)
    next_state, _, done, _ = env.step(np.argmax(action))
    next_state = np.reshape(next_state, [1, state_size])

    # Append the predicted action to predictions
    predictions.append(np.argmax(action))

    # Implement a mechanism to get the true label based on your evaluation data
    # Append the true label to true_labels

# Calculate the accuracy
accuracy = accuracy_score(true_labels, predictions)

# Calculate the confusion matrix
confusion_mat = confusion_matrix(true_labels, predictions)

print("Test Accuracy:", accuracy)
print("Confusion Matrix:\n", confusion_mat)

